--- a/src/SerialPort.cpp	2018-12-03 07:35:00.000000000 +0200
+++ b/src/SerialPort.cpp	2019-11-21 16:24:48.068478000 +0200
@@ -1194,7 +1194,7 @@
         case BaudRate::BAUD_230400:
             baud_rate_as_int = 230400 ;
             break ;
-
+#ifdef __linux__
         case BaudRate::BAUD_460800:
             baud_rate_as_int = 460800 ;
             break ;
@@ -1222,7 +1222,7 @@
         case BaudRate::BAUD_1500000:
             baud_rate_as_int = 1500000 ;
             break ;
-
+#if __MAX_BAUD > B2000000
         case BaudRate::BAUD_2000000:
             baud_rate_as_int = 2000000 ;
             break ;
@@ -1242,6 +1242,8 @@
         case BaudRate::BAUD_4000000:
             baud_rate_as_int = 4000000 ;
             break ;
+#endif // __MAX_BAUD
+#endif // __linux__
         default:
             // If an incorrect baud rate was specified, throw an exception.
             throw std::runtime_error(ERR_MSG_INVALID_BAUD_RATE) ;
@@ -2208,7 +2210,8 @@
 
         // Local variables.
         size_t number_of_bytes_read = 0 ;
-        size_t number_of_bytes_remaining = std::max(numberOfBytes, 1UL) ;
+        size_t max_num_one = 1;
+        size_t number_of_bytes_remaining = std::max(numberOfBytes, max_num_one) ;
         size_t maximum_number_of_bytes = dataBuffer.max_size() ;
         
         // Clear the data buffer and reserve enough space in the buffer to store the incoming data.
@@ -2302,7 +2305,8 @@
 
         // Local variables.
         size_t number_of_bytes_read = 0 ;
-        size_t number_of_bytes_remaining = std::max(numberOfBytes, 1UL) ;
+        size_t max_num_one = 1;
+        size_t number_of_bytes_remaining = std::max(numberOfBytes, max_num_one) ;
         size_t maximum_number_of_bytes = dataString.max_size() ;
         
         // Clear the data buffer and reserve enough space in the buffer to store the incoming data.
